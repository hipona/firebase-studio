// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Provides smart suggestions for watering schedules based on weather data.
 *
 * - `suggestWateringSchedule` - A function that suggests watering schedules.
 * - `SuggestWateringScheduleInput` - The input type for the `suggestWateringSchedule` function.
 * - `SuggestWateringScheduleOutput` - The return type for the `suggestWateringSchedule` function.
 */

import {ai} from '@/ai/ai-instance';
import {Weather, getWeather} from '@/services/weather';
import {z} from 'genkit';

const SuggestWateringScheduleInputSchema = z.object({
  location: z.string().describe('The location for which to suggest a watering schedule.'),
  plantType: z.string().describe('The type of plant to water.'),
  soilType: z.string().describe('The type of soil the plant is in.'),
});
export type SuggestWateringScheduleInput = z.infer<
  typeof SuggestWateringScheduleInputSchema
>;

const SuggestWateringScheduleOutputSchema = z.object({
  scheduleSuggestion: z.string().describe('A suggested watering schedule.'),
});
export type SuggestWateringScheduleOutput = z.infer<
  typeof SuggestWateringScheduleOutputSchema
>;

export async function suggestWateringSchedule(
  input: SuggestWateringScheduleInput
): Promise<SuggestWateringScheduleOutput> {
  return suggestWateringScheduleFlow(input);
}

const suggestWateringSchedulePrompt = ai.definePrompt({
  name: 'suggestWateringSchedulePrompt',
  input: {
    schema: z.object({
      location: z.string().describe('The location for which to suggest a watering schedule.'),
      plantType: z.string().describe('The type of plant to water.'),
      soilType: z.string().describe('The type of soil the plant is in.'),
      weatherConditions: z
        .string()
        .describe('The current weather conditions for the location.'),
      temperatureCelsius: z
        .number()
        .describe('The current temperature in Celsius for the location.'),
    }),
  },
  output: {
    schema: z.object({
      scheduleSuggestion: z
        .string()
        .describe('A suggested watering schedule based on the weather data.'),
    }),
  },
  prompt: `You are an expert gardening assistant. Based on the current weather conditions, plant type, and soil type, you will suggest an optimal watering schedule.

Location: {{{location}}}
Plant Type: {{{plantType}}}
Soil Type: {{{soilType}}}
Weather Conditions: {{{weatherConditions}}}
Temperature: {{{temperatureCelsius}}}Â°C

Suggest a watering schedule:
`,
});

const suggestWateringScheduleFlow = ai.defineFlow<
  typeof SuggestWateringScheduleInputSchema,
  typeof SuggestWateringScheduleOutputSchema
>(
  {
    name: 'suggestWateringScheduleFlow',
    inputSchema: SuggestWateringScheduleInputSchema,
    outputSchema: SuggestWateringScheduleOutputSchema,
  },
  async input => {
    const weather: Weather = await getWeather();
    const {output} = await suggestWateringSchedulePrompt({
      ...input,
      weatherConditions: weather.conditions,
      temperatureCelsius: weather.temperatureCelsius,
    });
    return output!;
  }
);
