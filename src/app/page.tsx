'use client';

import {useState, useEffect} from 'react';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';
import {Input} from '@/components/ui/input';
import {Label} from '@/components/ui/label';
import {Switch} from '@/components/ui/switch';
import {Separator} from '@/components/ui/separator';
import {toast} from '@/hooks/use-toast';
import {useToast} from '@/hooks/use-toast';
import {AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger} from "@/components/ui/alert-dialog"

import { initializeApp } from 'firebase/app';
import { getDatabase, ref, onValue, update, remove, push } from 'firebase/database';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

type Schedule = {
  id: string;
  time: string;
  days: string[];
  status: boolean;
};

const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

export default function Home() {
  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [newTime, setNewTime] = useState('');
  const [newDays, setNewDays] = useState<string[]>([]);
  const {toast} = useToast();

    useEffect(() => {
        const schedulesRef = ref(db, 'schedules');
        onValue(schedulesRef, (snapshot) => {
            const data = snapshot.val();
            if (data) {
                const schedulesList: Schedule[] = Object.entries(data).map(([key, value]) => ({
                    id: key,
                    time: value.time,
                    days: value.days,
                    status: value.status,
                }));
                setSchedules(schedulesList);
            } else {
                setSchedules([]);
            }
        });
    }, []);

  const handleDayToggle = (day: string) => {
    setNewDays((prevDays) => {
      if (prevDays.includes(day)) {
        return prevDays.filter((d) => d !== day);
      } else {
        return [...prevDays, day];
      }
    });
  };

    const handleAddSchedule = () => {
        if (!newTime) {
            toast({
                title: 'Error',
                description: 'Please enter a valid time.',
                variant: 'destructive',
            });
            return;
        }

        const newSchedule: Schedule = {
            id: '', // The ID will be generated by Firebase
            time: newTime,
            days: newDays,
            status: true,
        };

        const schedulesRef = ref(db, 'schedules');
        push(schedulesRef, {
            time: newSchedule.time,
            days: newSchedule.days,
            status: newSchedule.status
        }).then(() => {
            toast({
                title: 'Success',
                description: 'Schedule added successfully.',
            });
            setNewTime('');
            setNewDays([]);
        }).catch((error) => {
            toast({
                title: 'Error',
                description: 'Failed to add schedule: ' + error.message,
                variant: 'destructive',
            });
        });
    };

  const handleStatusToggle = (id: string) => {
      const scheduleRef = ref(db, `schedules/${id}/status`);
      const schedule = schedules.find(schedule => schedule.id === id);

      if (schedule) {
          const newStatus = !schedule.status;
          update(scheduleRef, newStatus).then(() => {
              setSchedules((prevSchedules) =>
                  prevSchedules.map((schedule) =>
                      schedule.id === id ? {...schedule, status: newStatus} : schedule
                  )
              );
              toast({
                  title: "Success",
                  description: "Schedule status updated successfully.",
              });
          }).catch((error) => {
              toast({
                  title: "Error",
                  description: "Failed to update schedule status: " + error.message,
                  variant: "destructive",
              });
          });
      }
  };

    const handleDeleteSchedule = (id: string) => {
        const scheduleRef = ref(db, `schedules/${id}`);
        remove(scheduleRef)
            .then(() => {
                toast({
                    title: "Success",
                    description: "Schedule deleted successfully.",
                });
            })
            .catch((error) => {
                toast({
                    title: "Error",
                    description: "Failed to delete schedule: " + error.message,
                    variant: "destructive",
                });
            });
    };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-2">
      <h1 className="text-2xl font-bold mb-4">AquaSchedule</h1>
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Add New Schedule</CardTitle>
          <CardDescription>Set the time and days for your watering schedule.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <div className="grid gap-2">
            <Label htmlFor="time">Time (e.g., 19:00)</Label>
            <Input
              id="time"
              type="time"
              value={newTime}
              onChange={(e) => setNewTime(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label>Days</Label>
            <div className="flex flex-wrap gap-2">
              {daysOfWeek.map((day) => (
                <Button
                  key={day}
                  variant={newDays.includes(day) ? 'default' : 'outline'}
                  onClick={() => handleDayToggle(day)}
                >
                  {day}
                </Button>
              ))}
            </div>
          </div>
          <Button onClick={handleAddSchedule}>Add Schedule</Button>
        </CardContent>
      </Card>
      <Separator className="my-4" />
      <div className="w-full max-w-md">
        <h2 className="text-xl font-semibold mb-2">My Schedules</h2>
        {schedules.length === 0 ? (
          <p className="text-muted-foreground">No schedules added yet.</p>
        ) : (
          <div className="grid gap-4">
            {schedules.map((schedule) => (
              <Card key={schedule.id}>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle>{schedule.time}</CardTitle>
                    <AlertDialog>
                        <AlertDialogTrigger asChild>
                            <Button variant="destructive" size="sm">
                                Delete
                            </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                            <AlertDialogHeader>
                                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                <AlertDialogDescription>
                                    This action cannot be undone. This will permanently delete this schedule.
                                </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction onClick={() => handleDeleteSchedule(schedule.id)}>
                                    Continue
                                </AlertDialogAction>
                            </AlertDialogFooter>
                        </AlertDialogContent>
                    </AlertDialog>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">
                    Days: {schedule.days.join(', ') || 'Not specified'}
                  </p>
                  <div className="flex items-center space-x-2 mt-2">
                    <Label htmlFor={`status-${schedule.id}`}>Status</Label>
                    <Switch
                      id={`status-${schedule.id}`}
                      checked={schedule.status}
                      onCheckedChange={() => handleStatusToggle(schedule.id)}
                    />
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
